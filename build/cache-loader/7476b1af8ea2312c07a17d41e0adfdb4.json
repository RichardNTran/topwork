{"remainingRequest":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/eru-longtn/work-center/node_modules/ts-loader/index.js??ref--5-2!/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/loading/redux-loading.tsx","dependencies":[{"path":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/loading/redux-loading.tsx","mtime":1582103313082},{"path":"/Users/eru-longtn/work-center/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/work-center/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import React, { Component } from 'react';\nimport { Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/redux/constant';\nclass ReduxLoading extends Component {\n    constructor(props) {\n        super(props);\n        this.renderLoadingComponent = () => {\n            const { spinning } = this.state;\n            const { isLoadingComponent } = this.props;\n            return (React.createElement(\"div\", { className: \"loading-wrapper\" },\n                isLoadingComponent && React.createElement(\"span\", { className: `${spinning ? 'isLoading' : 'normal'}` }),\n                this.props.children));\n        };\n        this.renderLoadingPage = () => {\n            const { spinning } = this.state;\n            const { isLoadingComponent } = this.props;\n            return (React.createElement(React.Fragment, null,\n                !isLoadingComponent && React.createElement(Spin, { spinning: spinning }),\n                this.props.children));\n        };\n        const { isLoadingComponent, expectedAction, expectedKey, actionName, specialKey } = props;\n        this.state = {\n            spinning: !isLoadingComponent\n                ? REQUEST(expectedAction) === actionName\n                : REQUEST(expectedAction) === actionName && expectedKey === specialKey\n        };\n    }\n    getCurrentSpinStatus() {\n        return this.state.spinning;\n    }\n    handleExpectedAction(expectedAction, nextProps) {\n        const { actionName, onChangeLoadingStatus, isLoadingComponent, expectedKey, specialKey } = nextProps;\n        const checkComponentUpdate = !isLoadingComponent || (isLoadingComponent && (!expectedKey || expectedKey === specialKey));\n        if (REQUEST(expectedAction) === actionName && checkComponentUpdate) {\n            onChangeLoadingStatus && onChangeLoadingStatus(true);\n            this.setState({ spinning: true });\n        }\n        if (checkComponentUpdate && (SUCCESS(expectedAction) === actionName || FAILURE(expectedAction) === actionName)) {\n            onChangeLoadingStatus && onChangeLoadingStatus(false);\n            this.setState({ spinning: false });\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        const { expectedAction, expectedActions } = nextProps;\n        expectedAction && this.handleExpectedAction(expectedAction, nextProps);\n        if (expectedActions && expectedActions.length !== 0) {\n            expectedActions.map(action => this.handleExpectedAction(action, nextProps));\n        }\n    }\n    render() {\n        const { isLoadingComponent } = this.props;\n        return isLoadingComponent ? this.renderLoadingComponent() : this.renderLoadingPage();\n    }\n}\nconst mapStateToProps = storeState => {\n    const { loadingReducer } = storeState;\n    const { isLoading, actionName, specialKey } = loadingReducer;\n    return {\n        isLoading,\n        actionName,\n        specialKey\n    };\n};\nconst reduxLoading = connect(mapStateToProps)(ReduxLoading);\nexport { reduxLoading as ReduxLoading };\n",{"version":3,"file":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/loading/redux-loading.tsx","sourceRoot":"","sources":["/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/loading/redux-loading.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAc/D,MAAM,YAAa,SAAQ,SAAiD;IAC1E,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAoCf,2BAAsB,GAAG,GAAG,EAAE;YAC5B,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAChC,MAAM,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAC1C,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB;gBAC7B,kBAAkB,IAAI,8BAAM,SAAS,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAI;gBACjF,IAAI,CAAC,KAAK,CAAC,QAAQ,CAChB,CACP,CAAC;QACJ,CAAC,CAAC;QAEF,sBAAiB,GAAG,GAAG,EAAE;YACvB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAChC,MAAM,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAC1C,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ;gBACZ,CAAC,kBAAkB,IAAI,oBAAC,IAAI,IAAC,QAAQ,EAAE,QAAQ,GAAI;gBACnD,IAAI,CAAC,KAAK,CAAC,QAAQ,CACL,CAClB,CAAC;QACJ,CAAC,CAAC;QAvDA,MAAM,EAAE,kBAAkB,EAAE,cAAc,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC;QAC1F,IAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,CAAC,kBAAkB;gBAC3B,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,UAAU;gBACxC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,UAAU,IAAI,WAAW,KAAK,UAAU;SACzE,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAED,oBAAoB,CAAC,cAAsB,EAAE,SAAS;QACpD,MAAM,EAAE,UAAU,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,SAAS,CAAC;QACrG,MAAM,oBAAoB,GAAG,CAAC,kBAAkB,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC,WAAW,IAAI,WAAW,KAAK,UAAU,CAAC,CAAC,CAAC;QACzH,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,UAAU,IAAI,oBAAoB,EAAE;YAClE,qBAAqB,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;SACnC;QACD,IAAI,oBAAoB,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,UAAU,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,UAAU,CAAC,EAAE;YAC9G,qBAAqB,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC;YACtD,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;SACpC;IACH,CAAC;IAED,yBAAyB,CAAC,SAAS;QACjC,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,SAAS,CAAC;QAEtD,cAAc,IAAI,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAEvE,IAAI,eAAe,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;YACnD,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;SAC7E;IACH,CAAC;IAwBD,MAAM;QACJ,MAAM,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1C,OAAO,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACvF,CAAC;CACF;AAED,MAAM,eAAe,GAAG,UAAU,CAAC,EAAE;IACnC,MAAM,EAAE,cAAc,EAAE,GAAG,UAAU,CAAC;IACtC,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,cAAc,CAAC;IAC7D,OAAO;QACL,SAAS;QACT,UAAU;QACV,UAAU;KACX,CAAC;AACJ,CAAC,CAAC;AAIF,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,CAAC;AAE5D,OAAO,EAAE,YAAY,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import React, { Component } from 'react';\nimport { Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/redux/constant';\n\ninterface IReduxLoadingProps extends StateProps {\n  expectedAction?: string;\n  expectedKey?: string;\n  expectedActions?: string[];\n  isLoadingComponent?: boolean;\n  onChangeLoadingStatus?: (value) => void;\n  componentKey?: string;\n}\n\ninterface IReduxLoadingState {\n  spinning: boolean;\n}\nclass ReduxLoading extends Component<IReduxLoadingProps, IReduxLoadingState> {\n  constructor(props) {\n    super(props);\n    const { isLoadingComponent, expectedAction, expectedKey, actionName, specialKey } = props;\n    this.state = {\n      spinning: !isLoadingComponent\n        ? REQUEST(expectedAction) === actionName\n        : REQUEST(expectedAction) === actionName && expectedKey === specialKey\n    };\n  }\n\n  getCurrentSpinStatus() {\n    return this.state.spinning;\n  }\n\n  handleExpectedAction(expectedAction: string, nextProps) {\n    const { actionName, onChangeLoadingStatus, isLoadingComponent, expectedKey, specialKey } = nextProps;\n    const checkComponentUpdate = !isLoadingComponent || (isLoadingComponent && (!expectedKey || expectedKey === specialKey));\n    if (REQUEST(expectedAction) === actionName && checkComponentUpdate) {\n      onChangeLoadingStatus && onChangeLoadingStatus(true);\n      this.setState({ spinning: true });\n    }\n    if (checkComponentUpdate && (SUCCESS(expectedAction) === actionName || FAILURE(expectedAction) === actionName)) {\n      onChangeLoadingStatus && onChangeLoadingStatus(false);\n      this.setState({ spinning: false });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { expectedAction, expectedActions } = nextProps;\n\n    expectedAction && this.handleExpectedAction(expectedAction, nextProps);\n\n    if (expectedActions && expectedActions.length !== 0) {\n      expectedActions.map(action => this.handleExpectedAction(action, nextProps));\n    }\n  }\n\n  renderLoadingComponent = () => {\n    const { spinning } = this.state;\n    const { isLoadingComponent } = this.props;\n    return (\n      <div className=\"loading-wrapper\">\n        {isLoadingComponent && <span className={`${spinning ? 'isLoading' : 'normal'}`} />}\n        {this.props.children}\n      </div>\n    );\n  };\n\n  renderLoadingPage = () => {\n    const { spinning } = this.state;\n    const { isLoadingComponent } = this.props;\n    return (\n      <React.Fragment>\n        {!isLoadingComponent && <Spin spinning={spinning} />}\n        {this.props.children}\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    const { isLoadingComponent } = this.props;\n    return isLoadingComponent ? this.renderLoadingComponent() : this.renderLoadingPage();\n  }\n}\n\nconst mapStateToProps = storeState => {\n  const { loadingReducer } = storeState;\n  const { isLoading, actionName, specialKey } = loadingReducer;\n  return {\n    isLoading,\n    actionName,\n    specialKey\n  };\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\nconst reduxLoading = connect(mapStateToProps)(ReduxLoading);\n\nexport { reduxLoading as ReduxLoading };\n"]}]}