{"remainingRequest":"/Users/eru-longtn/opela-agent-fe/node_modules/thread-loader/dist/cjs.js??ref--5-2!/Users/eru-longtn/opela-agent-fe/node_modules/ts-loader/index.js??ref--5-3!/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js!/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/common.ts","dependencies":[{"path":"/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/common.ts","mtime":1582103313180},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/react-hot-loader/webpack.js","mtime":1569983885062},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import * as jsonapi from 'jsonapi-serializer';\nimport _ from 'lodash';\nimport qs from 'qs';\nimport moment from 'moment';\nimport { APP_YEAR_MONTH_DATE_FORMAT, APP_TIME_FORMAT, CONVERT_CRAWLER_FORMAT_DATETIME, MONTH_YEAR_JAPAN_FORMAT } from 'app/shared/constant/common';\nimport { CLOUD_FRONT } from 'app/config/constants';\nconst JSONAPIDeserializer = jsonapi.Deserializer;\nexport function* deserializerResponse(response) {\n    return yield new JSONAPIDeserializer({ keyForAttribute: 'camelCase' }).deserialize(response);\n}\nexport function getTabPath(pathname) {\n    return `/${pathname.split('/')[1]}`;\n}\nexport function getTabType(pathname) {\n    return pathname.split('/')[2];\n}\nexport function getIdItem(pathname) {\n    return pathname.split('/')[3];\n}\nexport function composeValidators(...validators) {\n    return value => validators.reduce((error, validator) => error || validator(value), undefined);\n}\nexport function extendTaskRouteDetail(path) {\n    return `${path}/view/:id`;\n}\nexport function getAccessTokenParams(searchQuery) {\n    const startKey = '?accessToken=';\n    return searchQuery.startsWith(startKey) ? searchQuery.split(startKey)[1] : null;\n}\nexport function getCurrentDomain() {\n    const parts = window.location.hostname.split('.');\n    parts.shift();\n    return parts.join('.');\n}\nexport function snakeToCamel(str) {\n    const newStr = str;\n    return newStr.replace(/([-_][a-z])/g, group => group\n        .toUpperCase()\n        .replace('-', '')\n        .replace('_', ''));\n}\nexport function convertSnakeObjectToCamel(data) {\n    const covertData = {};\n    _.forEach(data, (value, key) => {\n        if (value) {\n            covertData[snakeToCamel(key)] = value;\n        }\n    });\n    return covertData;\n}\nexport function camelToSnake(string) {\n    return string.replace(/[\\w]([A-Z])/g, m => m[0] + '_' + m[1]).toLowerCase();\n}\nexport function convertCamelObjectToSnake(data, skipNil) {\n    const covertData = {};\n    _.forEach(data, (value, key) => {\n        if (skipNil) {\n            covertData[camelToSnake(key)] = value === undefined ? null : value;\n        }\n        else {\n            if (value) {\n                covertData[camelToSnake(key)] = value;\n            }\n        }\n    });\n    return covertData;\n}\nexport function parseArrayToComma(params) {\n    let data = '';\n    params && params.map((value, index) => (data = `${index === 0 ? '' : `${data},`}${value}`));\n    return data;\n}\nexport function sleepFunc(sec) {\n    return new Promise(resolve => setTimeout(resolve, sec * 1000));\n}\nexport function handlePayloadPushUrl(payload) {\n    return _.omitBy(payload, _.isNil);\n}\nexport function handlePayload(payload) {\n    const newPayload = {};\n    Object.keys(payload).forEach(key => (newPayload[key] = payload[key] === 'all' || payload[key] === '' ? null : payload[key]));\n    return _.omitBy(newPayload, _.isNil);\n}\nexport function parseParams(search) {\n    return qs.parse(search.substr(1)); // remove '?'\n}\nexport function getInterviewFromTo(startTime, endTime) {\n    return `${moment(startTime).format(APP_YEAR_MONTH_DATE_FORMAT)} ${moment(startTime).format(APP_TIME_FORMAT)}-${moment(endTime).format(APP_TIME_FORMAT)}`;\n}\nexport function handleBreakCharacterText(text) {\n    let newText = null;\n    if (text) {\n        newText = text.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n    }\n    return newText;\n}\nexport function handleBreakAndGroupData(text) {\n    if (_.isEmpty(text))\n        return '';\n    const arrayPart = text.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>').split('<br>');\n    let newText = '';\n    arrayPart.forEach((element, index) => {\n        if (index % 2 === 0) {\n            newText += `<span class=\"group-data\">${element} </br>`;\n        }\n        else {\n            newText += `${convertDateTimeFullCrawler(element)} </br></span>`;\n        }\n    });\n    return `<div class='field-content'>${newText}</div>`;\n}\nexport function toAscii(value) {\n    const charArray = [];\n    for (let i = value.length - 1; 0 <= i; i--) {\n        const charCode = (charArray[i] = value.charCodeAt(i));\n        switch (true) {\n            case charCode <= 0xff5e && 0xff01 <= charCode:\n                charArray[i] -= 0xfee0;\n                break;\n            case charCode === 0x3000:\n                charArray[i] = 0x0020;\n                break;\n            case charCode === 0x30fc:\n                charArray[i] = 0x002d;\n                break;\n            default:\n                charArray[i] = charCode;\n        }\n    }\n    return String.fromCharCode.apply(null, charArray);\n}\nexport function convertPeriodData(data) {\n    const periods = data.split(' - ');\n    let periodConvert = '';\n    if (periods[0])\n        periodConvert += moment(periods[0]).isValid() ? `${moment(periods[0]).format(MONTH_YEAR_JAPAN_FORMAT)} - ` : periods[0];\n    if (periods[1])\n        periodConvert += moment(periods[1]).isValid() ? `${moment(periods[1]).format(MONTH_YEAR_JAPAN_FORMAT)}` : periods[1];\n    return periodConvert;\n}\nexport function convertPeriodDataFull(data) {\n    const periods = data.split(' - ');\n    let periodConvert = '';\n    if (periods[0]) {\n        periodConvert += moment(periods[0]).isValid() ? `${moment(periods[0]).format(CONVERT_CRAWLER_FORMAT_DATETIME)} - ` : periods[0];\n    }\n    if (periods[1]) {\n        periodConvert += moment(periods[1]).isValid() ? `${moment(periods[1]).format(CONVERT_CRAWLER_FORMAT_DATETIME)}` : periods[1];\n    }\n    return periodConvert;\n}\nexport function convertDateTimeFullCrawler(dateTime) {\n    return moment(dateTime).isValid() ? moment(dateTime).format(CONVERT_CRAWLER_FORMAT_DATETIME) : dateTime;\n}\nexport function convertYearMonthJapan(dateTime) {\n    return moment(dateTime).isValid() ? moment(dateTime).format(MONTH_YEAR_JAPAN_FORMAT) : dateTime;\n}\nexport function handleMappingAvailableOptions(availableOptions, options) {\n    const availableItemOptions = [];\n    options.forEach(option => {\n        if (availableOptions.find(item => option && item === option.value)) {\n            availableItemOptions.push(option);\n        }\n    });\n    return availableItemOptions;\n}\nexport function handleMappingAvailableStatusOptions(availableOptions, options, currentStepId) {\n    const availableItemOptions = [];\n    options.forEach(option => {\n        if (availableOptions.find(item => option && item === option.value)) {\n            if (option.availableCurrentSteps.find(availableStepId => availableStepId === currentStepId)) {\n                availableItemOptions.push(option);\n            }\n        }\n    });\n    return availableItemOptions;\n}\nexport function mapCloudFrontURL(uri) {\n    if (_.isEmpty(uri))\n        return uri;\n    return `${CLOUD_FRONT}${uri}`;\n}\nexport function handleLastItem(list) {\n    // Just only set last item when total list greater than 1 item\n    if (list && list.length > 1) {\n        list[list.length - 1].isLast = true;\n    }\n    return list;\n}\n",{"version":3,"file":"/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/common.ts","sourceRoot":"","sources":["/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js!/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/common.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,oBAAoB,CAAC;AAC9C,OAAO,CAAC,MAAM,QAAQ,CAAC;AACvB,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,MAAM,MAAM,QAAQ,CAAC;AAM5B,OAAO,EACL,0BAA0B,EAC1B,eAAe,EACf,+BAA+B,EAC/B,uBAAuB,EACxB,MAAM,4BAA4B,CAAC;AAEpC,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAEnD,MAAM,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC;AAEjD,MAAM,SAAS,CAAC,CAAC,oBAAoB,CAAC,QAAQ;IAC5C,OAAO,MAAM,IAAI,mBAAmB,CAAC,EAAE,eAAe,EAAE,WAAW,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAC/F,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,QAAgB;IACzC,OAAO,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACtC,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,QAAgB;IACzC,OAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,QAAgB;IACxC,OAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;AACD,MAAM,UAAU,iBAAiB,CAAC,GAAG,UAAU;IAC7C,OAAO,KAAK,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;AAChG,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,IAAY;IAChD,OAAO,GAAG,IAAI,WAAW,CAAC;AAC5B,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,WAAmB;IACtD,MAAM,QAAQ,GAAG,eAAe,CAAC;IACjC,OAAO,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAClF,CAAC;AAED,MAAM,UAAU,gBAAgB;IAC9B,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAClD,KAAK,CAAC,KAAK,EAAE,CAAC;IACd,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,GAAG;IAC9B,MAAM,MAAM,GAAG,GAAG,CAAC;IACnB,OAAO,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,EAAE,CAC5C,KAAK;SACF,WAAW,EAAE;SACb,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;SAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CACpB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,IAAI;IAC5C,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC7B,IAAI,KAAK,EAAE;YACT,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;SACvC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,MAAM;IACjC,OAAO,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;AAC9E,CAAC;AAED,MAAM,UAAU,yBAAyB,CAAC,IAAI,EAAE,OAAiB;IAC/D,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC7B,IAAI,OAAO,EAAE;YACX,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;SACpE;aAAM;YACL,IAAI,KAAK,EAAE;gBACT,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;aACvC;SACF;IACH,CAAC,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAa;IAC7C,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;IAC5F,OAAO,IAAI,CAAC;AACd,CAAC;AACD,MAAM,UAAU,SAAS,CAAC,GAAG;IAC3B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AACjE,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,OAAO;IAC1C,OAAO,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,OAAO;IACnC,MAAM,UAAU,GAAG,EAAE,CAAC;IACtB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7H,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,MAAc;IACxC,OAAO,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa;AAClD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,SAAS,EAAE,OAAO;IACnD,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,0BAA0B,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CACnI,eAAe,CAChB,EAAE,CAAC;AACN,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,IAAY;IACnD,IAAI,OAAO,GAAG,IAAI,CAAC;IACnB,IAAI,IAAI,EAAE;QACR,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;KACnD;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,IAAY;IAClD,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;QAAE,OAAO,EAAE,CAAC;IAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACxE,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;QACnC,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;YACnB,OAAO,IAAI,4BAA4B,OAAO,QAAQ,CAAC;SACxD;aAAM;YACL,OAAO,IAAI,GAAG,0BAA0B,CAAC,OAAO,CAAC,eAAe,CAAC;SAClE;IACH,CAAC,CAAC,CAAC;IACH,OAAO,8BAA8B,OAAO,QAAQ,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,KAAa;IACnC,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1C,MAAM,QAAQ,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,QAAQ,IAAI,EAAE;YACZ,KAAK,QAAQ,IAAI,MAAM,IAAI,MAAM,IAAI,QAAQ;gBAC3C,SAAS,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC;gBACvB,MAAM;YACR,KAAK,QAAQ,KAAK,MAAM;gBACtB,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;gBACtB,MAAM;YACR,KAAK,QAAQ,KAAK,MAAM;gBACtB,SAAS,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;gBACtB,MAAM;YACR;gBACE,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;SAC3B;KACF;IACD,OAAO,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,IAAY;IAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAClC,IAAI,aAAa,GAAG,EAAE,CAAC;IACvB,IAAI,OAAO,CAAC,CAAC,CAAC;QAAE,aAAa,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACxI,IAAI,OAAO,CAAC,CAAC,CAAC;QAAE,aAAa,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACrI,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,IAAY;IAChD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAClC,IAAI,aAAa,GAAG,EAAE,CAAC;IACvB,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;QACd,aAAa,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,+BAA+B,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KACjI;IACD,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;QACd,aAAa,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,+BAA+B,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;KAC9H;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,0BAA0B,CAAC,QAAgB;IACzD,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;AAC1G,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,QAAgB;IACpD,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;AAClG,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,gBAA0B,EAAE,OAAsB;IAC9F,MAAM,oBAAoB,GAAG,EAAE,CAAC;IAChC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACvB,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,IAAI,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE;YAClE,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACnC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,oBAAoB,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,mCAAmC,CAAC,gBAA0B,EAAE,OAAsB,EAAE,aAAsB;IAC5H,MAAM,oBAAoB,GAAG,EAAE,CAAC;IAChC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACvB,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,IAAI,IAAI,KAAK,MAAM,CAAC,KAAK,CAAC,EAAE;YAClE,IAAI,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,eAAe,KAAK,aAAa,CAAC,EAAE;gBAC3F,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACnC;SACF;IACH,CAAC,CAAC,CAAC;IACH,OAAO,oBAAoB,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,GAAY;IAC3C,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC;QAAE,OAAO,GAAG,CAAC;IAC/B,OAAO,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC;AAChC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,IAAI;IACjC,8DAA8D;IAC9D,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;KACrC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import * as jsonapi from 'jsonapi-serializer';\nimport _ from 'lodash';\nimport qs from 'qs';\nimport moment from 'moment';\n\nimport i18next from 'app/shared/locales';\n\nimport { ISelectItem } from 'app/shared/model';\n\nimport {\n  APP_YEAR_MONTH_DATE_FORMAT,\n  APP_TIME_FORMAT,\n  CONVERT_CRAWLER_FORMAT_DATETIME,\n  MONTH_YEAR_JAPAN_FORMAT\n} from 'app/shared/constant/common';\n\nimport { CLOUD_FRONT } from 'app/config/constants';\n\nconst JSONAPIDeserializer = jsonapi.Deserializer;\n\nexport function* deserializerResponse(response) {\n  return yield new JSONAPIDeserializer({ keyForAttribute: 'camelCase' }).deserialize(response);\n}\n\nexport function getTabPath(pathname: string) {\n  return `/${pathname.split('/')[1]}`;\n}\n\nexport function getTabType(pathname: string) {\n  return pathname.split('/')[2];\n}\n\nexport function getIdItem(pathname: string) {\n  return pathname.split('/')[3];\n}\nexport function composeValidators(...validators) {\n  return value => validators.reduce((error, validator) => error || validator(value), undefined);\n}\n\nexport function extendTaskRouteDetail(path: string) {\n  return `${path}/view/:id`;\n}\n\nexport function getAccessTokenParams(searchQuery: string) {\n  const startKey = '?accessToken=';\n  return searchQuery.startsWith(startKey) ? searchQuery.split(startKey)[1] : null;\n}\n\nexport function getCurrentDomain() {\n  const parts = window.location.hostname.split('.');\n  parts.shift();\n  return parts.join('.');\n}\n\nexport function snakeToCamel(str) {\n  const newStr = str;\n  return newStr.replace(/([-_][a-z])/g, group =>\n    group\n      .toUpperCase()\n      .replace('-', '')\n      .replace('_', '')\n  );\n}\n\nexport function convertSnakeObjectToCamel(data) {\n  const covertData = {};\n  _.forEach(data, (value, key) => {\n    if (value) {\n      covertData[snakeToCamel(key)] = value;\n    }\n  });\n  return covertData;\n}\n\nexport function camelToSnake(string) {\n  return string.replace(/[\\w]([A-Z])/g, m => m[0] + '_' + m[1]).toLowerCase();\n}\n\nexport function convertCamelObjectToSnake(data, skipNil?: boolean) {\n  const covertData = {};\n  _.forEach(data, (value, key) => {\n    if (skipNil) {\n      covertData[camelToSnake(key)] = value === undefined ? null : value;\n    } else {\n      if (value) {\n        covertData[camelToSnake(key)] = value;\n      }\n    }\n  });\n  return covertData;\n}\n\nexport function parseArrayToComma(params: any[]) {\n  let data = '';\n  params && params.map((value, index) => (data = `${index === 0 ? '' : `${data},`}${value}`));\n  return data;\n}\nexport function sleepFunc(sec) {\n  return new Promise(resolve => setTimeout(resolve, sec * 1000));\n}\n\nexport function handlePayloadPushUrl(payload) {\n  return _.omitBy(payload, _.isNil);\n}\n\nexport function handlePayload(payload) {\n  const newPayload = {};\n  Object.keys(payload).forEach(key => (newPayload[key] = payload[key] === 'all' || payload[key] === '' ? null : payload[key]));\n  return _.omitBy(newPayload, _.isNil);\n}\n\nexport function parseParams(search: string) {\n  return qs.parse(search.substr(1)); // remove '?'\n}\n\nexport function getInterviewFromTo(startTime, endTime) {\n  return `${moment(startTime).format(APP_YEAR_MONTH_DATE_FORMAT)} ${moment(startTime).format(APP_TIME_FORMAT)}-${moment(endTime).format(\n    APP_TIME_FORMAT\n  )}`;\n}\n\nexport function handleBreakCharacterText(text: string) {\n  let newText = null;\n  if (text) {\n    newText = text.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n  }\n  return newText;\n}\n\nexport function handleBreakAndGroupData(text: string) {\n  if (_.isEmpty(text)) return '';\n  const arrayPart = text.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>').split('<br>');\n  let newText = '';\n  arrayPart.forEach((element, index) => {\n    if (index % 2 === 0) {\n      newText += `<span class=\"group-data\">${element} </br>`;\n    } else {\n      newText += `${convertDateTimeFullCrawler(element)} </br></span>`;\n    }\n  });\n  return `<div class='field-content'>${newText}</div>`;\n}\n\nexport function toAscii(value: string): string {\n  const charArray: number[] = [];\n  for (let i = value.length - 1; 0 <= i; i--) {\n    const charCode = (charArray[i] = value.charCodeAt(i));\n    switch (true) {\n      case charCode <= 0xff5e && 0xff01 <= charCode:\n        charArray[i] -= 0xfee0;\n        break;\n      case charCode === 0x3000:\n        charArray[i] = 0x0020;\n        break;\n      case charCode === 0x30fc:\n        charArray[i] = 0x002d;\n        break;\n      default:\n        charArray[i] = charCode;\n    }\n  }\n  return String.fromCharCode.apply(null, charArray);\n}\n\nexport function convertPeriodData(data: string) {\n  const periods = data.split(' - ');\n  let periodConvert = '';\n  if (periods[0]) periodConvert += moment(periods[0]).isValid() ? `${moment(periods[0]).format(MONTH_YEAR_JAPAN_FORMAT)} - ` : periods[0];\n  if (periods[1]) periodConvert += moment(periods[1]).isValid() ? `${moment(periods[1]).format(MONTH_YEAR_JAPAN_FORMAT)}` : periods[1];\n  return periodConvert;\n}\n\nexport function convertPeriodDataFull(data: string) {\n  const periods = data.split(' - ');\n  let periodConvert = '';\n  if (periods[0]) {\n    periodConvert += moment(periods[0]).isValid() ? `${moment(periods[0]).format(CONVERT_CRAWLER_FORMAT_DATETIME)} - ` : periods[0];\n  }\n  if (periods[1]) {\n    periodConvert += moment(periods[1]).isValid() ? `${moment(periods[1]).format(CONVERT_CRAWLER_FORMAT_DATETIME)}` : periods[1];\n  }\n  return periodConvert;\n}\n\nexport function convertDateTimeFullCrawler(dateTime: string) {\n  return moment(dateTime).isValid() ? moment(dateTime).format(CONVERT_CRAWLER_FORMAT_DATETIME) : dateTime;\n}\n\nexport function convertYearMonthJapan(dateTime: string) {\n  return moment(dateTime).isValid() ? moment(dateTime).format(MONTH_YEAR_JAPAN_FORMAT) : dateTime;\n}\n\nexport function handleMappingAvailableOptions(availableOptions: string[], options: ISelectItem[]) {\n  const availableItemOptions = [];\n  options.forEach(option => {\n    if (availableOptions.find(item => option && item === option.value)) {\n      availableItemOptions.push(option);\n    }\n  });\n  return availableItemOptions;\n}\n\nexport function handleMappingAvailableStatusOptions(availableOptions: string[], options: ISelectItem[], currentStepId?: string) {\n  const availableItemOptions = [];\n  options.forEach(option => {\n    if (availableOptions.find(item => option && item === option.value)) {\n      if (option.availableCurrentSteps.find(availableStepId => availableStepId === currentStepId)) {\n        availableItemOptions.push(option);\n      }\n    }\n  });\n  return availableItemOptions;\n}\n\nexport function mapCloudFrontURL(uri?: string) {\n  if (_.isEmpty(uri)) return uri;\n  return `${CLOUD_FRONT}${uri}`;\n}\n\nexport function handleLastItem(list) {\n  // Just only set last item when total list greater than 1 item\n  if (list && list.length > 1) {\n    list[list.length - 1].isLast = true;\n  }\n\n  return list;\n}\n"]}]}