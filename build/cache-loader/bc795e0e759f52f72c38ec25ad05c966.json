{"remainingRequest":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/eru-longtn/work-center/node_modules/ts-loader/index.js??ref--5-2!/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/frames/public-frame.tsx","dependencies":[{"path":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/frames/public-frame.tsx","mtime":1582103313064},{"path":"/Users/eru-longtn/work-center/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/work-center/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import { __rest } from \"tslib\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { HeaderPublicContainer, ReduxLoading } from 'app/shared/component';\nexport const PublicFrame = (_a) => {\n    var { component: Component, loadingAction, title } = _a, rest = __rest(_a, [\"component\", \"loadingAction\", \"title\"]);\n    const encloseInDefaultRoute = props => {\n        let loadingRef = null;\n        if (props.title)\n            document.title = props.title;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(HeaderPublicContainer, { containerClass: \"public-header\" }),\n            React.createElement(ReduxLoading, { expectedAction: props.loadingAction, ref: instance => {\n                    loadingRef = instance;\n                } },\n                React.createElement(Component, Object.assign({ loadingRef: loadingRef }, props)))));\n    };\n    if (!Component)\n        throw new Error(`A component needs to be specified for path ${rest.path}`);\n    return React.createElement(Route, Object.assign({}, rest, { render: props => encloseInDefaultRoute(Object.assign(Object.assign({}, props), { loadingAction, title })) }));\n};\nexport default PublicFrame;\n",{"version":3,"file":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/frames/public-frame.tsx","sourceRoot":"","sources":["/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/frames/public-frame.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAc,MAAM,kBAAkB,CAAC;AAErD,OAAO,EAAE,qBAAqB,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAO3E,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAA0E,EAAE,EAAE;QAA9E,EAAE,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,KAAK,OAA8B,EAA5B,0DAAO;IAC/E,MAAM,qBAAqB,GAAG,KAAK,CAAC,EAAE;QACpC,IAAI,UAAU,GAAG,IAAI,CAAC;QACtB,IAAI,KAAK,CAAC,KAAK;YAAE,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAC9C,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ;YACb,oBAAC,qBAAqB,IAAC,cAAc,EAAC,eAAe,GAAG;YACxD,oBAAC,YAAY,IACX,cAAc,EAAE,KAAK,CAAC,aAAa,EACnC,GAAG,EAAE,QAAQ,CAAC,EAAE;oBACd,UAAU,GAAG,QAAQ,CAAC;gBACxB,CAAC;gBAED,oBAAC,SAAS,kBAAC,UAAU,EAAE,UAAU,IAAM,KAAK,EAAI,CACnC,CACA,CAClB,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI,CAAC,SAAS;QAAE,MAAM,IAAI,KAAK,CAAC,8CAA+C,IAAY,CAAC,IAAI,EAAE,CAAC,CAAC;IAEpG,OAAO,oBAAC,KAAK,oBAAK,IAAI,IAAE,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,qBAAqB,iCAAM,KAAK,KAAE,aAAa,EAAE,KAAK,IAAG,IAAI,CAAC;AACzG,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import React from 'react';\nimport { Route, RouteProps } from 'react-router-dom';\n\nimport { HeaderPublicContainer, ReduxLoading } from 'app/shared/component';\n\ninterface IPublicFrameProps extends RouteProps {\n  loadingAction?: string;\n  title?: string;\n}\n\nexport const PublicFrame = ({ component: Component, loadingAction, title, ...rest }: IPublicFrameProps) => {\n  const encloseInDefaultRoute = props => {\n    let loadingRef = null;\n    if (props.title) document.title = props.title;\n    return (\n      <React.Fragment>\n        <HeaderPublicContainer containerClass=\"public-header\" />\n        <ReduxLoading\n          expectedAction={props.loadingAction}\n          ref={instance => {\n            loadingRef = instance;\n          }}\n        >\n          <Component loadingRef={loadingRef} {...props} />\n        </ReduxLoading>\n      </React.Fragment>\n    );\n  };\n\n  if (!Component) throw new Error(`A component needs to be specified for path ${(rest as any).path}`);\n\n  return <Route {...rest} render={props => encloseInDefaultRoute({ ...props, loadingAction, title })} />;\n};\n\nexport default PublicFrame;\n"]}]}