{"remainingRequest":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/eru-longtn/work-center/node_modules/ts-loader/index.js??ref--5-2!/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/redux/saga/auth.saga.ts","dependencies":[{"path":"/Users/eru-longtn/work-center/src/main/webapp/app/redux/saga/auth.saga.ts","mtime":1582428212540},{"path":"/Users/eru-longtn/work-center/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/work-center/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import { put, all, takeLatest } from 'redux-saga/effects';\nimport { AUTH_ACTION, SUCCESS, FAILURE, REQUEST } from '../constant';\nimport { authService } from 'app/service';\nimport { CookiesStorage, deserializerResponse } from 'app/shared/utils';\nimport { CookieKey, topworkPlatformRoute } from 'app/shared/constant';\nimport history from 'app/config/history';\nfunction* loginEmailPasswordWorker(action) {\n    try {\n        const result = yield authService.loginEmailPassword(Object.assign({}, action.payload));\n        const { data } = result;\n        const accessToken = `${data.attributes.token_type} ${data.attributes.access_token}`;\n        yield CookiesStorage.setAccessToken(accessToken);\n        // const currentUserRes = yield authService.getcurentAccountInfo();\n        // const currentUser = yield deserializerResponse(currentUserRes);\n        // yield CookiesStorage.setCookieData(CookieKey.userRole, (currentUser.roles[0] || {}).name);\n        history.push(topworkPlatformRoute.Home);\n        yield put({\n            type: SUCCESS(AUTH_ACTION.LOGIN),\n            payload: {}\n        });\n    }\n    catch (e) {\n        yield put({ type: FAILURE(AUTH_ACTION.LOGIN), errors: e.errors });\n    }\n}\nfunction* getCurrentUserInfo() {\n    try {\n        const accessToken = CookiesStorage.getAccessToken();\n        authService.updateJWTAuthen(accessToken);\n        const result = yield authService.getcurentAccountInfo();\n        const currentUser = yield deserializerResponse(result);\n        yield CookiesStorage.setCookieData(CookieKey.userRole, (currentUser.roles[0] || {}).name);\n        yield put({\n            type: SUCCESS(AUTH_ACTION.GET_CURRENT_INFO),\n            payload: { currentUser }\n        });\n    }\n    catch (e) {\n        CookiesStorage.clearData();\n        yield put({ type: FAILURE(AUTH_ACTION.GET_CURRENT_INFO), errors: e.errors });\n    }\n}\nexport default function* authSaga() {\n    yield all([takeLatest(REQUEST(AUTH_ACTION.LOGIN), loginEmailPasswordWorker)]);\n    yield all([takeLatest(REQUEST(AUTH_ACTION.GET_CURRENT_INFO), getCurrentUserInfo)]);\n}\n",{"version":3,"file":"/Users/eru-longtn/work-center/src/main/webapp/app/redux/saga/auth.saga.ts","sourceRoot":"","sources":["/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/redux/saga/auth.saga.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAE1D,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACrE,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAExE,OAAO,EAAE,SAAS,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AACtE,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAEzC,QAAQ,CAAC,CAAC,wBAAwB,CAAC,MAAM;IACvC,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,kBAAkB,mBAAM,MAAM,CAAC,OAAO,EAAG,CAAC;QAC3E,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;QACxB,MAAM,WAAW,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;QACpF,MAAM,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAEjD,mEAAmE;QACnE,kEAAkE;QAClE,6FAA6F;QAC7F,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,GAAG,CAAC;YACR,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC;YAChC,OAAO,EAAE,EAAE;SACZ,CAAC,CAAC;KACJ;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,GAAG,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;KACnE;AACH,CAAC;AAED,QAAQ,CAAC,CAAC,kBAAkB;IAC1B,IAAI;QACF,MAAM,WAAW,GAAG,cAAc,CAAC,cAAc,EAAE,CAAC;QACpD,WAAW,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QACzC,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,oBAAoB,EAAE,CAAC;QACxD,MAAM,WAAW,GAAiB,MAAM,oBAAoB,CAAC,MAAM,CAAC,CAAC;QACrE,MAAM,cAAc,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;QAC1F,MAAM,GAAG,CAAC;YACR,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC;YAC3C,OAAO,EAAE,EAAE,WAAW,EAAE;SACzB,CAAC,CAAC;KACJ;IAAC,OAAO,CAAC,EAAE;QACV,cAAc,CAAC,SAAS,EAAE,CAAC;QAC3B,MAAM,GAAG,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;KAC9E;AACH,CAAC;AAED,MAAM,CAAC,OAAO,SAAS,CAAC,CAAC,QAAQ;IAC/B,MAAM,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,wBAAwB,CAAC,CAAC,CAAC,CAAC;IAC9E,MAAM,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC;AACrF,CAAC","sourcesContent":["import { put, all, takeLatest } from 'redux-saga/effects';\n\nimport { AUTH_ACTION, SUCCESS, FAILURE, REQUEST } from '../constant';\nimport { authService } from 'app/service';\nimport { CookiesStorage, deserializerResponse } from 'app/shared/utils';\nimport { IAccountInfo } from 'app/shared/model';\nimport { CookieKey, topworkPlatformRoute } from 'app/shared/constant';\nimport history from 'app/config/history';\n\nfunction* loginEmailPasswordWorker(action) {\n  try {\n    const result = yield authService.loginEmailPassword({ ...action.payload });\n    const { data } = result;\n    const accessToken = `${data.attributes.token_type} ${data.attributes.access_token}`;\n    yield CookiesStorage.setAccessToken(accessToken);\n\n    // const currentUserRes = yield authService.getcurentAccountInfo();\n    // const currentUser = yield deserializerResponse(currentUserRes);\n    // yield CookiesStorage.setCookieData(CookieKey.userRole, (currentUser.roles[0] || {}).name);\n    history.push(topworkPlatformRoute.Home);\n    yield put({\n      type: SUCCESS(AUTH_ACTION.LOGIN),\n      payload: {}\n    });\n  } catch (e) {\n    yield put({ type: FAILURE(AUTH_ACTION.LOGIN), errors: e.errors });\n  }\n}\n\nfunction* getCurrentUserInfo() {\n  try {\n    const accessToken = CookiesStorage.getAccessToken();\n    authService.updateJWTAuthen(accessToken);\n    const result = yield authService.getcurentAccountInfo();\n    const currentUser: IAccountInfo = yield deserializerResponse(result);\n    yield CookiesStorage.setCookieData(CookieKey.userRole, (currentUser.roles[0] || {}).name);\n    yield put({\n      type: SUCCESS(AUTH_ACTION.GET_CURRENT_INFO),\n      payload: { currentUser }\n    });\n  } catch (e) {\n    CookiesStorage.clearData();\n    yield put({ type: FAILURE(AUTH_ACTION.GET_CURRENT_INFO), errors: e.errors });\n  }\n}\n\nexport default function* authSaga() {\n  yield all([takeLatest(REQUEST(AUTH_ACTION.LOGIN), loginEmailPasswordWorker)]);\n  yield all([takeLatest(REQUEST(AUTH_ACTION.GET_CURRENT_INFO), getCurrentUserInfo)]);\n}\n"]}]}