{"remainingRequest":"/Users/eru-longtn/opela-agent-fe/node_modules/thread-loader/dist/cjs.js??ref--5-2!/Users/eru-longtn/opela-agent-fe/node_modules/ts-loader/index.js??ref--5-3!/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js!/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/component/selections/selection-status.tsx","dependencies":[{"path":"/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/component/selections/selection-status.tsx","mtime":1582103313095},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/react-hot-loader/webpack.js","mtime":1569983885062},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport i18next from 'app/shared/locales';\nimport { getTaskSelectionStatus } from 'app/redux/actions';\nimport { handleMappingAvailableOptions } from 'app/shared/utils';\nimport { SelectField } from 'app/shared/component';\nclass SelectionStatus extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChangeSelect = selectedOption => {\n            const { onChangeSelection } = this.props;\n            this.setState({\n                selectedOption\n            });\n            onChangeSelection && onChangeSelection(selectedOption);\n        };\n        this.state = {\n            selectedOption: props.selectedOption\n        };\n    }\n    componentDidMount() {\n        const { options, getOptionsAction } = this.props;\n        !options && getOptionsAction();\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            selectedOption: nextProps.selectedOption\n        });\n    }\n    render() {\n        const { selectedOption } = this.state;\n        const { name, placeholder, options, classNameStyle, menuPlacement, extendOptions, availableOptions, noOptionsMessage } = this.props;\n        if (!options)\n            return null;\n        const itemOptions = availableOptions ? handleMappingAvailableOptions(availableOptions, options) : options;\n        return (React.createElement(\"div\", { className: \"selection-status-content\" },\n            React.createElement(SelectField, { name: name, value: selectedOption, options: itemOptions, extendOptions: extendOptions, onChange: this.handleChangeSelect, placeholder: placeholder, className: classNameStyle, menuPlacement: menuPlacement, noOptionsMessage: noOptionsMessage ? noOptionsMessage : () => i18next.t('component.selectionField.noOptionsMessage') })));\n    }\n}\nconst mapStateToProps = state => {\n    const { appDataReducer } = state;\n    const { taskSelectionStatus } = appDataReducer;\n    return {\n        options: taskSelectionStatus\n    };\n};\nconst mapDispatchToProps = dispatch => ({\n    getOptionsAction: () => dispatch(getTaskSelectionStatus())\n});\nconst selectionStatus = connect(mapStateToProps, mapDispatchToProps)(SelectionStatus);\nexport { selectionStatus as SelectionStatus };\n",{"version":3,"file":"/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/component/selections/selection-status.tsx","sourceRoot":"","sources":["/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js!/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/component/selections/selection-status.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,OAAO,MAAM,oBAAoB,CAAC;AACzC,OAAO,EAAE,sBAAsB,EAAE,MAAM,mBAAmB,CAAC;AAC3D,OAAO,EAAE,6BAA6B,EAAE,MAAM,kBAAkB,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAoBnD,MAAM,eAAgB,SAAQ,SAA2C;IACvE,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAkBf,uBAAkB,GAAG,cAAc,CAAC,EAAE;YACpC,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC;gBACZ,cAAc;aACf,CAAC,CAAC;YAEH,iBAAiB,IAAI,iBAAiB,CAAC,cAAc,CAAC,CAAC;QACzD,CAAC,CAAC;QAvBA,IAAI,CAAC,KAAK,GAAG;YACX,cAAc,EAAE,KAAK,CAAC,cAAc;SACrC,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACjD,CAAC,OAAO,IAAI,gBAAgB,EAAE,CAAC;IACjC,CAAC;IAED,yBAAyB,CAAC,SAAS;QACjC,IAAI,CAAC,QAAQ,CAAC;YACZ,cAAc,EAAE,SAAS,CAAC,cAAc;SACzC,CAAC,CAAC;IACL,CAAC;IAWD,MAAM;QACJ,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACtC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpI,IAAI,CAAC,OAAO;YAAE,OAAO,IAAI,CAAC;QAC1B,MAAM,WAAW,GAAG,gBAAgB,CAAC,CAAC,CAAC,6BAA6B,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAC1G,OAAO,CACL,6BAAK,SAAS,EAAC,0BAA0B;YACvC,oBAAC,WAAW,IACV,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,cAAc,EACrB,OAAO,EAAE,WAAW,EACpB,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,IAAI,CAAC,kBAAkB,EACjC,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,cAAc,EACzB,aAAa,EAAE,aAAa,EAC5B,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,2CAA2C,CAAC,GACpH,CACE,CACP,CAAC;IACJ,CAAC;CACF;AAED,MAAM,eAAe,GAAG,KAAK,CAAC,EAAE;IAC9B,MAAM,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;IACjC,MAAM,EAAE,mBAAmB,EAAE,GAAG,cAAc,CAAC;IAC/C,OAAO;QACL,OAAO,EAAE,mBAAmB;KAC7B,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IACtC,gBAAgB,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,sBAAsB,EAAE,CAAC;CAC3D,CAAC,CAAC;AAKH,MAAM,eAAe,GAAG,OAAO,CAC7B,eAAe,EACf,kBAAkB,CACnB,CAAC,eAAe,CAAC,CAAC;AAEnB,OAAO,EAAE,eAAe,IAAI,eAAe,EAAE,CAAC","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport i18next from 'app/shared/locales';\nimport { getTaskSelectionStatus } from 'app/redux/actions';\nimport { handleMappingAvailableOptions } from 'app/shared/utils';\nimport { SelectField } from 'app/shared/component';\nimport { ISelectItem } from 'app/shared/model';\n\ninterface ISelectionState {\n  selectedOption?: ISelectItem;\n}\n\ninterface ISelectionProps extends StateProps, DispatchProps {\n  name?: string;\n  placeholder?: string;\n  selectedOption?: ISelectItem;\n  extendOptions?: ISelectItem[];\n  currentStepId?: string;\n  availableOptions?: string[];\n  getOptionsAction: () => void;\n  onChangeSelection?: (value) => void;\n  classNameStyle?: string;\n  menuPlacement?: string;\n  noOptionsMessage?: () => string;\n}\nclass SelectionStatus extends Component<ISelectionProps, ISelectionState> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedOption: props.selectedOption\n    };\n  }\n\n  componentDidMount() {\n    const { options, getOptionsAction } = this.props;\n    !options && getOptionsAction();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      selectedOption: nextProps.selectedOption\n    });\n  }\n\n  handleChangeSelect = selectedOption => {\n    const { onChangeSelection } = this.props;\n    this.setState({\n      selectedOption\n    });\n\n    onChangeSelection && onChangeSelection(selectedOption);\n  };\n\n  render() {\n    const { selectedOption } = this.state;\n    const { name, placeholder, options, classNameStyle, menuPlacement, extendOptions, availableOptions, noOptionsMessage } = this.props;\n    if (!options) return null;\n    const itemOptions = availableOptions ? handleMappingAvailableOptions(availableOptions, options) : options;\n    return (\n      <div className=\"selection-status-content\">\n        <SelectField\n          name={name}\n          value={selectedOption}\n          options={itemOptions}\n          extendOptions={extendOptions}\n          onChange={this.handleChangeSelect}\n          placeholder={placeholder}\n          className={classNameStyle}\n          menuPlacement={menuPlacement}\n          noOptionsMessage={noOptionsMessage ? noOptionsMessage : () => i18next.t('component.selectionField.noOptionsMessage')}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { appDataReducer } = state;\n  const { taskSelectionStatus } = appDataReducer;\n  return {\n    options: taskSelectionStatus\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getOptionsAction: () => dispatch(getTaskSelectionStatus())\n});\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nconst selectionStatus = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SelectionStatus);\n\nexport { selectionStatus as SelectionStatus };\n"]}]}