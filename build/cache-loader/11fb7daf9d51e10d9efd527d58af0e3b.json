{"remainingRequest":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/eru-longtn/work-center/node_modules/ts-loader/index.js??ref--5-2!/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/redux/reducer/loading.reducer.ts","dependencies":[{"path":"/Users/eru-longtn/work-center/src/main/webapp/app/redux/reducer/loading.reducer.ts","mtime":1582103313008},{"path":"/Users/eru-longtn/work-center/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/work-center/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["const initialState = {\n    isLoading: false,\n    actionName: '',\n    specialKey: null\n};\nconst getActionType = (actionType) => {\n    const parts = actionType.split('_');\n    return parts[parts.length - 1];\n};\nconst getActionName = (actionType) => {\n    const parts = actionType.split('_');\n    parts.pop();\n    return parts.join('_');\n};\nexport const handleActionStatus = (actionType, payload) => {\n    switch (actionType) {\n        // todo\n        default:\n            return null;\n    }\n};\nexport default (state = initialState, action) => {\n    const type = getActionType(action.type);\n    handleActionStatus(action.type, action.payload);\n    switch (type) {\n        case 'FULFILLED':\n        case 'REJECTED':\n            return {\n                isLoading: false,\n                actionName: action.type,\n                specialKey: action.specialKey || null\n            };\n        case 'PENDING':\n            return {\n                isLoading: true,\n                actionName: action.type,\n                specialKey: action.specialKey || null\n            };\n        default:\n            return state;\n    }\n};\n",{"version":3,"file":"/Users/eru-longtn/work-center/src/main/webapp/app/redux/reducer/loading.reducer.ts","sourceRoot":"","sources":["/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/redux/reducer/loading.reducer.ts"],"names":[],"mappings":"AAAA,MAAM,YAAY,GAAG;IACnB,SAAS,EAAE,KAAK;IAChB,UAAU,EAAE,EAAE;IACd,UAAU,EAAE,IAAI;CACjB,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,UAAkB,EAAE,EAAE;IAC3C,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACpC,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,UAAkB,EAAE,EAAE;IAC3C,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACpC,KAAK,CAAC,GAAG,EAAE,CAAC;IACZ,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,UAAkB,EAAE,OAAY,EAAE,EAAE;IACrE,QAAQ,UAAU,EAAE;QAClB,OAAO;QACP;YACE,OAAO,IAAI,CAAC;KACf;AACH,CAAC,CAAC;AAIF,eAAe,CAAC,QAAsB,YAAY,EAAE,MAAM,EAAgB,EAAE;IAC1E,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IAChD,QAAQ,IAAI,EAAE;QACZ,KAAK,WAAW,CAAC;QACjB,KAAK,UAAU;YACb,OAAO;gBACL,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,MAAM,CAAC,IAAI;gBACvB,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,IAAI;aACtC,CAAC;QACJ,KAAK,SAAS;YACZ,OAAO;gBACL,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,MAAM,CAAC,IAAI;gBACvB,UAAU,EAAE,MAAM,CAAC,UAAU,IAAI,IAAI;aACtC,CAAC;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC","sourcesContent":["const initialState = {\n  isLoading: false,\n  actionName: '',\n  specialKey: null\n};\n\nconst getActionType = (actionType: string) => {\n  const parts = actionType.split('_');\n  return parts[parts.length - 1];\n};\n\nconst getActionName = (actionType: string) => {\n  const parts = actionType.split('_');\n  parts.pop();\n  return parts.join('_');\n};\n\nexport const handleActionStatus = (actionType: string, payload: any) => {\n  switch (actionType) {\n    // todo\n    default:\n      return null;\n  }\n};\n\nexport type LoadingState = Readonly<typeof initialState>;\n\nexport default (state: LoadingState = initialState, action): LoadingState => {\n  const type = getActionType(action.type);\n  handleActionStatus(action.type, action.payload);\n  switch (type) {\n    case 'FULFILLED':\n    case 'REJECTED':\n      return {\n        isLoading: false,\n        actionName: action.type,\n        specialKey: action.specialKey || null\n      };\n    case 'PENDING':\n      return {\n        isLoading: true,\n        actionName: action.type,\n        specialKey: action.specialKey || null\n      };\n    default:\n      return state;\n  }\n};\n"]}]}