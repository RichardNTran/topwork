{"remainingRequest":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/eru-longtn/work-center/node_modules/ts-loader/index.js??ref--5-2!/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/input-field.tsx","dependencies":[{"path":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/input-field.tsx","mtime":1582103313047},{"path":"/Users/eru-longtn/work-center/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/work-center/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import React from 'react';\nimport { Field } from 'react-final-form';\nimport { composeValidators } from 'app/shared/utils';\nimport { ButtonIcon } from 'app/shared/component';\nconst InputField = props => {\n    const { placeholder, validates, name, type, value, className, showClearIndicator, onClear, onInputChange, readOnly } = props;\n    return (React.createElement(Field, { name: name, type: type, placeholder: placeholder, validate: validates ? composeValidators(...validates) : null, defaultValue: value, readOnly: readOnly }, ({ input, meta }) => {\n        const hasError = meta.submitFailed && meta.error;\n        return (React.createElement(\"div\", { className: `input-content ${className} ${hasError ? 'has-error' : ''} ${showClearIndicator ? 'input-form-has-icon' : ''}` },\n            React.createElement(\"input\", Object.assign({}, input, { placeholder: placeholder, className: `form-control ${showClearIndicator ? 'pd-r-25' : ''}`, autoComplete: \"off\", onChange: event => {\n                    input.onChange(event);\n                    onInputChange && onInputChange(event.target && event.target.value);\n                }, readOnly: readOnly })),\n            showClearIndicator && input.value && (React.createElement(ButtonIcon, { iconName: \"x\", iconClass: \"icon-8\", containerClass: \"btn-transparent btn-clear-input btn-icon-pr pt-0\", onClick: onClear })),\n            hasError ? React.createElement(\"span\", { className: \"error\" },\n                \" \",\n                meta.error,\n                \" \") : ''));\n    }));\n};\nexport { InputField };\n",{"version":3,"file":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/input-field.tsx","sourceRoot":"","sources":["/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/input-field.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEzC,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAkBlD,MAAM,UAAU,GAA2B,KAAK,CAAC,EAAE;IACjD,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,kBAAkB,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAE7H,OAAO,CACL,oBAAC,KAAK,IACJ,IAAI,EAAE,IAAI,EACV,IAAI,EAAE,IAAI,EACV,WAAW,EAAE,WAAW,EACxB,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAC5D,YAAY,EAAE,KAAK,EACnB,QAAQ,EAAE,QAAQ,IAEjB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE;QACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC;QACjD,OAAO,CACL,6BAAK,SAAS,EAAE,iBAAiB,SAAS,IAAI,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,kBAAkB,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,EAAE;YAC5H,+CACM,KAAK,IACT,WAAW,EAAE,WAAW,EACxB,SAAS,EAAE,gBAAgB,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAChE,YAAY,EAAC,KAAK,EAClB,QAAQ,EAAE,KAAK,CAAC,EAAE;oBAChB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACtB,aAAa,IAAI,aAAa,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACrE,CAAC,EACD,QAAQ,EAAE,QAAQ,IAClB;YACD,kBAAkB,IAAI,KAAK,CAAC,KAAK,IAAI,CACpC,oBAAC,UAAU,IACT,QAAQ,EAAC,GAAG,EACZ,SAAS,EAAC,QAAQ,EAClB,cAAc,EAAC,kDAAkD,EACjE,OAAO,EAAE,OAAO,GAChB,CACH;YACA,QAAQ,CAAC,CAAC,CAAC,8BAAM,SAAS,EAAC,OAAO;;gBAAG,IAAI,CAAC,KAAK;oBAAS,CAAC,CAAC,CAAC,EAAE,CAC1D,CACP,CAAC;IACJ,CAAC,CACK,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import React from 'react';\nimport { Field } from 'react-final-form';\n\nimport { composeValidators } from 'app/shared/utils';\nimport { ButtonIcon } from 'app/shared/component';\n\nexport interface IFieldModel {\n  placeholder?: string;\n  type: string;\n  name: string;\n  validates?: any;\n  prefix?: any;\n  className?: any;\n  inputRef?: any;\n  autoFocus?: boolean;\n  value?: string;\n  showClearIndicator?: boolean;\n  onClear?: any;\n  onInputChange?: any;\n  readOnly?: boolean;\n}\n\nconst InputField: React.SFC<IFieldModel> = props => {\n  const { placeholder, validates, name, type, value, className, showClearIndicator, onClear, onInputChange, readOnly } = props;\n\n  return (\n    <Field\n      name={name}\n      type={type}\n      placeholder={placeholder}\n      validate={validates ? composeValidators(...validates) : null}\n      defaultValue={value}\n      readOnly={readOnly}\n    >\n      {({ input, meta }) => {\n        const hasError = meta.submitFailed && meta.error;\n        return (\n          <div className={`input-content ${className} ${hasError ? 'has-error' : ''} ${showClearIndicator ? 'input-form-has-icon' : ''}`}>\n            <input\n              {...input}\n              placeholder={placeholder}\n              className={`form-control ${showClearIndicator ? 'pd-r-25' : ''}`}\n              autoComplete=\"off\"\n              onChange={event => {\n                input.onChange(event);\n                onInputChange && onInputChange(event.target && event.target.value);\n              }}\n              readOnly={readOnly}\n            />\n            {showClearIndicator && input.value && (\n              <ButtonIcon\n                iconName=\"x\"\n                iconClass=\"icon-8\"\n                containerClass=\"btn-transparent btn-clear-input btn-icon-pr pt-0\"\n                onClick={onClear}\n              />\n            )}\n            {hasError ? <span className=\"error\"> {meta.error} </span> : ''}\n          </div>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport { InputField };\n"]}]}