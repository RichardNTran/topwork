{"remainingRequest":"/Users/eru-longtn/opela-agent-fe/node_modules/thread-loader/dist/cjs.js??ref--5-2!/Users/eru-longtn/opela-agent-fe/node_modules/ts-loader/index.js??ref--5-3!/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js!/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/local-storage.ts","dependencies":[{"path":"/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/local-storage.ts","mtime":1582103313183},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/react-hot-loader/webpack.js","mtime":1569983885062},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import moment from 'moment';\nimport Cookies from 'universal-cookie';\nimport { getCurrentDomain } from 'app/shared/utils';\nimport { CookieKey } from 'app/shared/constant';\nimport { ENV } from 'app/config/constants';\nconst USER_DATA = 'pts-opela-user-data';\nconst History_Storage = 'historyStorage';\nfunction isExpired(time) {\n    const now = moment();\n    const checkedTime = moment(time);\n    if (!checkedTime.isValid())\n        return true;\n    if (now.isAfter(checkedTime))\n        return true;\n    return false;\n}\nexport const HistoryStorage = {\n    setData(res) {\n        localStorage.setItem(History_Storage, JSON.stringify(res));\n    },\n    clearData() {\n        localStorage.removeItem(History_Storage);\n    },\n    getHistory() {\n        const storedData = JSON.parse(localStorage.getItem(History_Storage));\n        return storedData;\n    }\n};\nexport const UserStorage = {\n    setAccessTokenAuthen(res, remember) {\n        remember ? localStorage.setItem(USER_DATA, res) : sessionStorage.setItem(USER_DATA, res);\n    },\n    setData(res, remember) {\n        remember ? localStorage.setItem(USER_DATA, res) : sessionStorage.setItem(USER_DATA, res);\n    },\n    clearData() {\n        localStorage.removeItem(USER_DATA);\n        sessionStorage.removeItem(USER_DATA);\n    },\n    getRole() {\n        const currentUser = JSON.parse(localStorage.getItem(USER_DATA));\n        return (currentUser || {}).role;\n    },\n    getCurrentInfo() {\n        const currentUser = JSON.parse(localStorage.getItem(USER_DATA));\n        return currentUser;\n    },\n    authenticated() {\n        const storedData = JSON.parse(localStorage.getItem(USER_DATA)) || JSON.parse(sessionStorage.getItem(USER_DATA));\n        if (!storedData)\n            return null;\n        if (isExpired(storedData.expires_on))\n            return null;\n        return storedData;\n    }\n};\nconst cookies = new Cookies();\nexport const CookiesStorage = {\n    getCookieData(key) {\n        return cookies.get(`${key}-${ENV}`);\n    },\n    setCookieData(key, data) {\n        const domain = getCurrentDomain();\n        const expires = moment()\n            .add(1, 'day')\n            .toDate();\n        cookies.set(`${key}-${ENV}`, data, { domain, expires, path: '/' });\n    },\n    clearCookieData(key) {\n        const domain = getCurrentDomain();\n        cookies.remove(`${key}-${ENV}`, { domain, path: '/' });\n    },\n    getAccessToken() {\n        return cookies.get(`${CookieKey.accessToken}-${ENV}`);\n    },\n    setAccessToken(accessToken) {\n        const domain = getCurrentDomain();\n        const expires = moment()\n            .add(1, 'day')\n            .toDate();\n        cookies.set(`${CookieKey.accessToken}-${ENV}`, accessToken, { domain, expires });\n    },\n    clearData() {\n        const domain = getCurrentDomain();\n        cookies.remove(`${CookieKey.accessToken}-${ENV}`, { domain });\n    },\n    authenticated() {\n        const accessToken = cookies.get(`${CookieKey.accessToken}-${ENV}`);\n        // todo more case - ext: check expired time\n        return accessToken !== undefined;\n    }\n};\n",{"version":3,"file":"/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/local-storage.ts","sourceRoot":"","sources":["/Users/eru-longtn/opela-agent-fe/node_modules/tslint-loader/index.js!/Users/eru-longtn/opela-agent-fe/src/main/webapp/app/shared/utils/local-storage.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport Cookies from 'universal-cookie';\n\nimport { IAccountInfo } from 'app/shared/model';\nimport { getCurrentDomain } from 'app/shared/utils';\nimport { CookieKey } from 'app/shared/constant';\nimport { ENV } from 'app/config/constants';\n\nconst USER_DATA = 'pts-opela-user-data';\nconst History_Storage = 'historyStorage';\n\nfunction isExpired(time) {\n  const now = moment();\n  const checkedTime = moment(time);\n\n  if (!checkedTime.isValid()) return true;\n  if (now.isAfter(checkedTime)) return true;\n\n  return false;\n}\n\nexport const HistoryStorage = {\n  setData(res) {\n    localStorage.setItem(History_Storage, JSON.stringify(res));\n  },\n  clearData() {\n    localStorage.removeItem(History_Storage);\n  },\n  getHistory() {\n    const storedData = JSON.parse(localStorage.getItem(History_Storage));\n    return storedData;\n  }\n};\n\nexport const UserStorage = {\n  setAccessTokenAuthen(res, remember) {\n    remember ? localStorage.setItem(USER_DATA, res) : sessionStorage.setItem(USER_DATA, res);\n  },\n  setData(res, remember) {\n    remember ? localStorage.setItem(USER_DATA, res) : sessionStorage.setItem(USER_DATA, res);\n  },\n  clearData() {\n    localStorage.removeItem(USER_DATA);\n    sessionStorage.removeItem(USER_DATA);\n  },\n  getRole() {\n    const currentUser = JSON.parse(localStorage.getItem(USER_DATA));\n    return (currentUser || {}).role;\n  },\n\n  getCurrentInfo() {\n    const currentUser = JSON.parse(localStorage.getItem(USER_DATA));\n    return currentUser as IAccountInfo;\n  },\n\n  authenticated() {\n    const storedData = JSON.parse(localStorage.getItem(USER_DATA)) || JSON.parse(sessionStorage.getItem(USER_DATA));\n    if (!storedData) return null;\n    if (isExpired(storedData.expires_on)) return null;\n    return storedData;\n  }\n};\n\nconst cookies = new Cookies();\nexport const CookiesStorage = {\n  getCookieData(key: string) {\n    return cookies.get(`${key}-${ENV}`);\n  },\n  setCookieData(key: string, data: string) {\n    const domain = getCurrentDomain();\n    const expires = moment()\n      .add(1, 'day')\n      .toDate();\n    cookies.set(`${key}-${ENV}`, data, { domain, expires, path: '/' });\n  },\n  clearCookieData(key) {\n    const domain = getCurrentDomain();\n    cookies.remove(`${key}-${ENV}`, { domain, path: '/' });\n  },\n  getAccessToken() {\n    return cookies.get(`${CookieKey.accessToken}-${ENV}`);\n  },\n  setAccessToken(accessToken) {\n    const domain = getCurrentDomain();\n    const expires = moment()\n      .add(1, 'day')\n      .toDate();\n    cookies.set(`${CookieKey.accessToken}-${ENV}`, accessToken, { domain, expires });\n  },\n  clearData() {\n    const domain = getCurrentDomain();\n    cookies.remove(`${CookieKey.accessToken}-${ENV}`, { domain });\n  },\n  authenticated() {\n    const accessToken = cookies.get(`${CookieKey.accessToken}-${ENV}`);\n    // todo more case - ext: check expired time\n    return accessToken !== undefined;\n  }\n};\n"]}]}