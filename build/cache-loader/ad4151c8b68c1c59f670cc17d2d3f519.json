{"remainingRequest":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/eru-longtn/work-center/node_modules/ts-loader/index.js??ref--5-2!/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/textarea-field.tsx","dependencies":[{"path":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/textarea-field.tsx","mtime":1582103313059},{"path":"/Users/eru-longtn/work-center/node_modules/cache-loader/dist/cjs.js","mtime":1569983888264},{"path":"/Users/eru-longtn/work-center/node_modules/thread-loader/dist/cjs.js","mtime":1569983892807},{"path":"/Users/eru-longtn/work-center/node_modules/ts-loader/index.js","mtime":1569983892971},{"path":"/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js","mtime":1566205911452}],"contextDependencies":[],"result":["import React from 'react';\nimport { Field } from 'react-final-form';\nimport { composeValidators } from 'app/shared/utils/common';\nconst TextareaField = props => {\n    const { placeholder, validates, name, className, click, onChange, value, classNameInput } = props;\n    return (React.createElement(Field, { name: name, placeholder: placeholder, classNameInput: classNameInput, validate: validates ? composeValidators(...validates) : null, defaultValue: value }, ({ input, meta }) => {\n        const hasError = meta.submitFailed && meta.error;\n        return (React.createElement(\"div\", { className: `input-content ${className || ''} ${hasError ? 'has-error' : ''}` },\n            React.createElement(\"textarea\", Object.assign({}, input, { placeholder: placeholder, className: classNameInput, onClick: click })),\n            hasError ? React.createElement(\"span\", { className: \"error\" },\n                \" \",\n                meta.error,\n                \" \") : ''));\n    }));\n};\nexport { TextareaField };\n",{"version":3,"file":"/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/textarea-field.tsx","sourceRoot":"","sources":["/Users/eru-longtn/work-center/node_modules/tslint-loader/index.js!/Users/eru-longtn/work-center/src/main/webapp/app/shared/component/form/textarea-field.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAEzC,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAa5D,MAAM,aAAa,GAAmC,KAAK,CAAC,EAAE;IAC5D,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;IAElG,OAAO,CACL,oBAAC,KAAK,IACJ,IAAI,EAAE,IAAI,EACV,WAAW,EAAE,WAAW,EACxB,cAAc,EAAE,cAAc,EAC9B,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,EAC5D,YAAY,EAAE,KAAK,IAElB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE;QACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC;QAEjD,OAAO,CACL,6BAAK,SAAS,EAAE,iBAAiB,SAAS,IAAI,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE;YAC/E,kDAAc,KAAK,IAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,cAAc,EAAE,OAAO,EAAE,KAAK,IAAI;YAC3F,QAAQ,CAAC,CAAC,CAAC,8BAAM,SAAS,EAAC,OAAO;;gBAAG,IAAI,CAAC,KAAK;oBAAS,CAAC,CAAC,CAAC,EAAE,CAC1D,CACP,CAAC;IACJ,CAAC,CACK,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,aAAa,EAAE,CAAC","sourcesContent":["import React from 'react';\nimport { Field } from 'react-final-form';\n\nimport { composeValidators } from 'app/shared/utils/common';\n\nexport interface ITextareaFieldModel {\n  placeholder?: string;\n  name: string;\n  validates?: any;\n  className?: any;\n  click?: any;\n  onChange?: any;\n  value?: any;\n  classNameInput?: string;\n}\n\nconst TextareaField: React.SFC<ITextareaFieldModel> = props => {\n  const { placeholder, validates, name, className, click, onChange, value, classNameInput } = props;\n\n  return (\n    <Field\n      name={name}\n      placeholder={placeholder}\n      classNameInput={classNameInput}\n      validate={validates ? composeValidators(...validates) : null}\n      defaultValue={value}\n    >\n      {({ input, meta }) => {\n        const hasError = meta.submitFailed && meta.error;\n\n        return (\n          <div className={`input-content ${className || ''} ${hasError ? 'has-error' : ''}`}>\n            <textarea {...input} placeholder={placeholder} className={classNameInput} onClick={click} />\n            {hasError ? <span className=\"error\"> {meta.error} </span> : ''}\n          </div>\n        );\n      }}\n    </Field>\n  );\n};\n\nexport { TextareaField };\n"]}]}